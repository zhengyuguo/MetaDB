



SQL injection: how to avoid?

cross site attack: how to avoid?


Database:
	Renamed accession to user;
	Removed columns: password, randomcode,expirationdate;
	Added a column pwhash which means hash code of password.

create account:
	Some restrictions have been added in the backend. 
	The user will be notified when the submitted items don't satisfy the restrictions. 
	You don't need to care about these.


Password:
	I've finished the encrypting password and verifying password.

Forms: 
	I put some restrictions on the items posted from the front-end pages.
	If the restrictions were not satisfied, the forms will be obandoned.
	Meanwhile, the user will be notified.


inquiry.html:
	I've modified your page to show all the inqueries submitted.
	This page is invisible. Please add a form into this page to submit a super code which is used to verify the manager's identification.
	I have realized some APIs for your front-end pages:
	(1) get all the inqueries.
	I need to make sure what operation you want to use to change the status for each inquery.
	I may realize a API by which you can use with post method to change the status. 


download.html:
	Downloading link should be provided in this page.
	Verified user can download the datasets.
	Please discuss with Zhengyu about the downloading link.



statistc.html:
	By exploiting the given API, you can get JSON file including statistic data.
	I am not familiar with Javascript. It's hard for me to modify your code to exploit these data. 
	Could you realize the relative front-end page to show the statistics?



search by keyword:
	Too many results.
	I am discussing with Zhengyu about how to exploit different search restrictions.
	I will realize some APIs by which you can get the search result. 


	
